<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title class="mb-2">File Upload Success</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 flex flex-col items-center justify-center min-h-screen">
  <div class="max-w-md w-full bg-white shadow-md rounded-lg p-8">
    <h2 class="text-2xl font-semibold mb-4 text-center">Datoteke uspješno poslane</h2>
    

    <button onclick="location.href='/'" class="w-full bg-blue-500 text-white font-medium rounded-lg text-sm px-5 py-2.5 text-center
      bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700
      hover:from-blue-600 hover:via-blue-700 hover:to-blue-800
      focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800">
      Povratak na početnu
    </button>
  </div>

  <script>
    const fileIcons = {
      'application/pdf': 'fa-file-pdf',
      'application/msword': 'fa-file-word',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'fa-file-word',
      'application/vnd.ms-excel': 'fa-file-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'fa-file-excel',
      'text/plain': 'fa-file-alt',
      'application/zip': 'fa-file-archive',
      'application/x-rar-compressed': 'fa-file-archive'
    };

    document.addEventListener('DOMContentLoaded', function() {
      const data = JSON.stringify(data); // Embeds the JSON string of `data`
      updateFileDetails(data);
      displayFilePreview(data);

      document.getElementById('file-link').addEventListener('click', function(event) {
        event.preventDefault(); // Prevent default behavior of downloading the file
        displayFilePreview(data); // Display the preview instead
      });
    });

    function displayFilePreview(data) {
      const previewContainer = document.getElementById('preview');
      const file = {
        name: data.Key,
        type: getFileType(data.Key),
        url: data.Location
      };

      console.log('File Type:', file.type); // Log file type for debugging

      let previewElement;

      if (file.type && file.type.startsWith('image')) {
        previewElement = document.createElement('img');
        previewElement.src = file.url;
        previewElement.alt = file.name;
        previewElement.classList.add('w-full', 'h-auto', 'rounded');
      } else if (file.type && file.type.startsWith('video')) {
        previewElement = document.createElement('video');
        previewElement.src = file.url;
        previewElement.controls = true;
        previewElement.classList.add('w-full', 'h-auto', 'rounded');
      } else {
        // Handle other file types here if needed
        previewElement = document.createElement('div');
        const icon = document.createElement('i');
        icon.classList.add('fas', 'mr-2', 'text-xl', fileIcons[file.type] || 'fa-file');
        const fileName = document.createElement('span');
        fileName.textContent = file.name;
        previewElement.appendChild(icon);
        previewElement.appendChild(fileName);
      }

      previewContainer.innerHTML = ''; // Clear previous previews
      previewContainer.appendChild(previewElement);
    }

    function getFileType(filename) {
      const extension = filename.split('.').pop().toLowerCase();
      const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];
      const videoExtensions = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv'];

      if (imageExtensions.includes(extension)) {
        return 'image';
      } else if (videoExtensions.includes(extension)) {
        return 'video';
      } else {
        return 'other';
      }
    }
  </script>
</body>
</html>